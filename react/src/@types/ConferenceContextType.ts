export type ConferenceContextType = {
    isScreenShared: boolean;
    talkers: any[];
    screenSharedVideoId: string | null;
    roomJoinMode: string;
    audioTracks: any[];
    isPublished: boolean;
    selectedCamera: string | null;
    selectedMicrophone: string | null;
    selectedBackgroundMode: string;
    participants: any[];
    messageDrawerOpen: boolean;
    participantListDrawerOpen: boolean;
    messages: any[];
    numberOfUnReadMessages: number;
    pinnedVideoId: string | undefined;
    participantUpdated: boolean;
    allParticipants: Record<string, any>;
    globals: any;
    isPlayOnly: boolean | undefined | string;
    localVideo: HTMLElement | null;
    streamName: string;
    initialized: boolean;
    devices: Object[];
    publishStreamId: string | boolean | undefined;
    isMyMicMuted: boolean;
    isMyCamTurnedOff: boolean;
    sendReactions: (reaction: any) => void;
    setSelectedBackgroundMode: React.Dispatch<React.SetStateAction<string>>;
    setIsVideoEffectRunning: React.Dispatch<React.SetStateAction<boolean>>;
    setParticipants: React.Dispatch<React.SetStateAction<any[]>>;
    handleMessageDrawerOpen: (open: boolean) => void;
    handleParticipantListOpen: (open: boolean) => void;
    setSelectedCamera: React.Dispatch<React.SetStateAction<string | null>>;
    setSelectedMicrophone: React.Dispatch<React.SetStateAction<string | null>>;
    setLeftTheRoom: React.Dispatch<React.SetStateAction<boolean>>;
    joinRoom: (roomName: any, generatedStreamId: string | number | boolean | ((prevState: string | true | undefined) => string | true | undefined) | undefined, roomJoinMode: any) => void;
    handleStopScreenShare: () => void;
    handleStartScreenShare: () => void;
    cameraSelected: (value: string | null) => void;
    microphoneSelected: (value: string | null) => void;
    handleBackgroundReplacement: (option: string) => void;
    muteLocalMic: () => void;
    unmuteLocalMic: () => void;
    checkAndTurnOnLocalCamera: (streamId: string) => void;
    checkAndTurnOffLocalCamera: (streamId: string) => void;
    setAudioLevelListener: (listener: (arg0: any) => void, period: number | undefined) => void;
    handleSetMessages: (newMessage: { name: any; date: string | number | Date; message: string; }) => void;
    toggleSetNumberOfUnreadMessages: (numb: React.SetStateAction<number>) => void;
    pinVideo: (id: string | undefined, videoLabelProp: string) => void;
    setLocalVideo: () => void;
    setWaitingOrMeetingRoom: React.Dispatch<React.SetStateAction<string>>;
    setStreamName: React.Dispatch<React.SetStateAction<string>>;
    handleLeaveFromRoom: () => void;
    handleSendNotificationEvent: (eventType: string, publishStreamId: string | boolean | undefined, info: { streamId?: any; senderStreamId?: string | true | undefined; reaction?: any; } | undefined) => void;
    handleSetMaxVideoTrackCount: (maxTrackCount: number) => void;
    screenShareOffNotification: () => void;
    handleSendMessage: (message: string) => void;
    turnOffYourMicNotification: (participantId: any) => void;
    addFakeParticipant: () => void;
    removeFakeParticipant: () => void;
    assignVideoToStream: (videoTrackId: string, streamId: string) => void;
    showEmojis: boolean;
    setShowEmojis: React.Dispatch<React.SetStateAction<boolean>>;
    isMuteParticipantDialogOpen: boolean;
    setMuteParticipantDialogOpen: React.Dispatch<React.SetStateAction<boolean>>;
    participantIdMuted: {streamName: string, streamId: string};
    setParticipantIdMuted: React.Dispatch<React.SetStateAction<{streamName: string, streamId: string}>>;
    videoSendResolution: string;
    setVideoSendResolution: React.Dispatch<React.SetStateAction<string>>;
};
